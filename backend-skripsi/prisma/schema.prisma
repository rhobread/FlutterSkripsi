// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               Int                 @id @default(autoincrement())
  name             String
  email            String
  password         String
  height           Float?
  weight           Float?
  equipments       user_equipment[]
  workouts         workoutperweek[]
  availabilities   user_availability[]
  workout_progress workout_progress[]
  level            user_group_level[]
}

model user_availability {
  id      Int    @id @default(autoincrement())
  user_id Int
  day     String
  minutes Int
  user    users  @relation(fields: [user_id], references: [id])
}

model workout_progress {
  id               Int                 @id @default(autoincrement())
  user_id          Int
  workout_id       Int
  date             DateTime // date when the workout was completed
  user             users               @relation(fields: [user_id], references: [id])
  workout          workout             @relation(fields: [workout_id], references: [id])
  exerciseProgress exercise_progress[]
}

model exercise_progress {
  id                  Int              @id @default(autoincrement())
  workout_progress_id Int
  workout_exercise_id Int
  sets                Int
  reps                Int
  weight_used         Float? // used for weight exercises
  level_done          Int? // used for bodyweight exercises
  workout_progress    workout_progress @relation(fields: [workout_progress_id], references: [id])
  workout_exercise    workout_exercise @relation(fields: [workout_exercise_id], references: [id])
}

model workoutperweek {
  id       Int                        @id @default(autoincrement())
  user_id  Int
  workouts workout_per_week_workout[]
  user     users                      @relation(fields: [user_id], references: [id])
}

model workout {
  id        Int                        @id @default(autoincrement())
  exercises workout_exercise[]
  perWeek   workout_per_week_workout[]
  date      DateTime                   @default(now())

  workout_progress workout_progress[]
}

model workout_exercise {
  id          Int      @id @default(autoincrement())
  workout_id  Int
  exercise_id Int
  workout     workout  @relation(fields: [workout_id], references: [id])
  exercise    exercise @relation(fields: [exercise_id], references: [id])
  reps        Int      @default(6)
  set         Int      @default(1)
  weight      Float?
  level       Int?

  exercise_progress exercise_progress[]
}

model exercise {
  id          Int                  @id @default(autoincrement())
  exercise_cd String
  level       Int?
  name        String
  intensity   String
  duration    Int
  types       String?
  muscles     exercise_muscle[]
  equipments  exercise_equipment[]
  workouts    workout_exercise[]
  group       excercise_group[]
}

model group {
  id        Int                @id @default(autoincrement())
  name      String
  exercises excercise_group[]
  user      user_group_level[]
}

model user_group_level {
  id       Int   @id @default(autoincrement())
  user_id  Int
  group_id Int
  level    Int?
  user     users @relation(fields: [user_id], references: [id])
  group    group @relation(fields: [group_id], references: [id])

  @@unique([user_id, group_id])
}

model excercise_group {
  id           Int      @id @default(autoincrement())
  excercise_id Int
  group_id     Int
  difficulty   Int?
  exercise     exercise @relation(fields: [excercise_id], references: [id])
  group        group    @relation(fields: [group_id], references: [id])
}

model exercise_muscle {
  id          Int      @id @default(autoincrement())
  exercise_id Int
  muscle_id   Int
  exercise    exercise @relation(fields: [exercise_id], references: [id])
  muscle      muscle   @relation(fields: [muscle_id], references: [id])
  rating      Int
}

model muscle {
  id        Int               @id @default(autoincrement())
  name      String
  exercises exercise_muscle[]
}

model equipment {
  id        Int                  @id @default(autoincrement())
  name      String
  exercises exercise_equipment[]
  users     user_equipment[]
}

model exercise_equipment {
  id           Int       @id @default(autoincrement())
  exercise_id  Int
  equipment_id Int
  exercise     exercise  @relation(fields: [exercise_id], references: [id])
  equipment    equipment @relation(fields: [equipment_id], references: [id])
}

model user_equipment {
  id           Int       @id @default(autoincrement())
  user_id      Int
  equipment_id Int
  user         users     @relation(fields: [user_id], references: [id])
  equipment    equipment @relation(fields: [equipment_id], references: [id])
}

model workout_per_week_workout {
  id                Int            @id @default(autoincrement())
  workout_id        Int
  workoutperweek_id Int
  workout           workout        @relation(fields: [workout_id], references: [id])
  workoutperweek    workoutperweek @relation(fields: [workoutperweek_id], references: [id])
}

/**
 * revision for this table, store in memory
 * model exercise_muscle {
 * id          Int      @id @default(autoincrement())
 * exercise_id Int
 * muscle_id   Int
 * exercise    exercise @relation(fields: [exercise_id], references: [id])
 * muscle      muscle   @relation(fields: [muscle_id], references: [id])
 * rating  Int
 * }
 * I want to make the backend with nestjs that fulfill this requirements
 * 1. create a new user which they'll enter all the required fields
 * 2. based on the user input, create a new workout plan with these requirements
 * a. the workout should hit each muscle as similar amount of number of times points as possible (points is calculated from number of sets of an excersise * rating in the excersise_muscle table)
 * b. the number of workout days will be based on the user's availability
 * c. the excersise table have duration column and intensity column which can either be 'low', 'medium', 'high', 'very high', each require 1 minutes, 2,4 and 6 minutes of rest each after they're performed
 * d. the excersise picked for the workout should only be the one which the user have access to the equipment
 * e. the workout plan should aim to reach the highest total points possible from every muscle combined (again, points is calculated from number of sets of an excersise * rating in the excersise_muscle table) in the amount of times the user is availabe (for example if a user only have 5 minutes on a single day, they won't be able to do very high excersise)
 * f. an excersise can't be perform for more than 3 sets per workout
 * what method will be best to achieve this? (can use anything and everything), give the best possible method and the complete code of the workout generation
 * example of the contents of the excersise table
 * /**
 * group :
 * 1. leg push
 * 2. leg pull
 * 3. vertical pull
 * 4. horizontal push
 * 5. horizontal pull
 * 6. side delt
 * 7. bicep
 * 8. tricep
 * equipment :
 * 1. dip bar
 * 2. light dumbell (5-20kg)
 * 3. medium dumbell (20-50kg)
 * 4. heavy dumbell (50-100kg)
 * 5. barbell (100kg - 200kg)
 * 6. heavy barbell (> 200kg)
 * 7. bar
 * 8. rope, straps
 * 9. pull up bar
 * 10. dip bar
 * 11. squat rack
 * 12. bench
 * muscle :
 * 1. lats
 * 2. chest
 * 3. side delts
 * 4. mid back
 * 5. biceps
 * 6. triceps
 * 7. quads
 * 8. hamstring
 * group:
 * 1. leg push
 * 2. leg pull
 * 3. vertical pull
 * 4. horizontal push
 * 5. horizontal pull
 * 6. side delt
 * 7. bicep
 * 8. tricep
 * excersise :
 * 1. Pull up
 * equipment : pull up bar,
 * muscle hit : lats (7), biceps (4), mid back (5)
 * exercise_cd : 'PLU'
 * type : 'bodyweight'
 * group : 'vertical pull'
 * difficulty : 5
 * level : 1
 * 1. high one hand Pull up
 * equipment : pull up bar,
 * muscle hit : lats (7), biceps (4), mid back (5)
 * exercise_cd : 'PLU'
 * type : 'bodyweight'
 * group : 'vertical pull'
 * difficulty : 6
 * level : 2
 * 1. low one hand Pull up
 * equipment : pull up bar,
 * muscle hit : lats (7), biceps (4), mid back (5)
 * exercise_cd : 'PLU'
 * type : 'bodyweight'
 * group : 'vertical pull'
 * difficulty : 7
 * level : 3
 * 1. one arm Pull up
 * equipment : pull up bar,
 * muscle hit : lats (7), biceps (4), mid back (5)
 * exercise_cd : 'PLU'
 * type : 'bodyweight'
 * group : 'vertical pull'
 * difficulty : 9
 * level : 4
 * 2. Push up :
 * equipment : null
 * muscle hit : chest (8), triceps (5)
 * exercise_cd : 'PU'
 * type : 'bodyweight'
 * group : 'horizontal push'
 * difficulty : 3
 * level : 1
 * 2. high one arm Push up :
 * equipment : null
 * muscle hit : chest (8), triceps (5)
 * exercise_cd : 'PU'
 * type : 'bodyweight'
 * group : 'horizontal push'
 * difficulty : 5
 * level : 2
 * 2. low one arm Push up :
 * equipment : null
 * muscle hit : chest (8), triceps (5)
 * exercise_cd : 'PU'
 * type : 'bodyweight'
 * group : 'horizontal push'
 * difficulty : 6
 * level : 3
 * 2. one arm Push up :
 * equipment : null
 * muscle hit : chest (8), triceps (5)
 * exercise_cd : 'PU'
 * type : 'bodyweight'
 * group : 'horizontal push'
 * difficulty : 7
 * level : 4
 * 3. Side lateral raise :
 * equipment : light dumbell
 * muscle hit : side delt (10)
 * exercise_cd : 'LR'
 * type : 'weight'
 * 4. dumbell bicep curl :
 * equipment : light dumbell or medium dumbell
 * muscle hit : bicep (7)
 * exercise_cd : 'DBC'
 * type : 'weight'
 * 5. bodyweight tricep extension
 * equipment : dip bar
 * muscle hit : tricep (7)
 * exercise_cd : 'BTC'
 * type : 'bodyweight'
 * level : 1
 * 6. reverse lunge
 * equipment : medium dumbell
 * muscle hit : quads (10)
 * exercise_cd : 'LRL'
 * type : 'weight'
 * 7. barbell squat
 * equipment : barbell, squat rack
 * muscle hit : quads (10)
 * exercise_cd : 'LBS'
 * type : 'weight'
 * 8. deadlift
 * equipment : barbell or heavy barbell
 * muscle hit : quads (8), hamstring (6), mid back (3)
 * exercise_cd : 'LD'
 * type : 'weight'
 * 9. bodyweight row
 * equipment : dip bar
 * muscle hit : mid back (8), lats (5), biceps (4)
 * exercise_cd : 'BR'
 * type : 'bodyweight'
 * level : 1
 * 9. bodyweight archer row
 * equipment : dip bar
 * muscle hit : mid back (8), lats (5), biceps (4)
 * exercise_cd : 'BR'
 * type : 'bodyweight'
 * level : 2
 * 9. one arm bodyweight row
 * equipment : dip bar
 * muscle hit : mid back (8), lats (5), biceps (4)
 * exercise_cd : 'BR'
 * type : 'bodyweight'
 * level : 3
 * 10.barbell row
 * equipment : barbell
 * exercise_cd : 'BBR'
 * muscle hit : mid back (8), lats (5), biceps (4)
 * type : 'weight'
 * 11. dips
 * equipment : dip bar
 * muscle hit : triceps (6), chest (7)
 * exercise_cd : 'BD'
 * type : 'bodyweight'
 * level : 1
 * 12. dumbell pullover
 * equipment : dumbell, bench
 * muscle hit : lats (7),
 * exercise_cd : 'DPL'
 * type : 'weight'
 * 13. tuck front lever
 * equipment : pull up bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 1
 * 13. half tuck front lever
 * equipment : pull up bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 2
 * 13. full front lever
 * equipment : pull up bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 3
 * 14. static tuck front lever
 * equipment : dip bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 1
 * 14. static half tuck front lever
 * equipment : dip bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 2
 * 14. static full front lever
 * equipment : dip bar
 * muscle hit : lats (8)
 * exercise_cd : 'PUFL'
 * type : 'bodyweight'
 * level : 3
 */

// make a function that'll take the user's id, then take in their equipments, days_available and minutes_available then generate a workout plan with these requirements :
//  * a. the workout should hit each muscle as similar amount of number of times points as possible (points is calculated from number of sets of an excersise * rating in the excersise_muscle table)
//  * b. the number of workout days will be based on the user's availability
//  * c. the excersise table have duration column and intensity column which can either be 'low', 'medium', 'high', 'very high', each require 1 minutes, 2,4 and 6 minutes of rest each after they're performed, so for example a high exercise with duration of 5 will require 4 + 5 = 9 minutes of times in total
//  * d. the excersise picked for the workout should only be the one which the user have access to the equipment
//  * e. the workout plan should aim to reach the highest total points possible from every muscle combined (again, points is calculated from number of sets of an excersise * rating in the excersise_muscle table) in the amount of times the user is availabe (for example if a user only have 5 minutes on a single day, they won't be able to do very high excersise)
//  * f. an excersise can't be perform for more than 3 sets per workout unless there's no more exercise available, for example if their only available lats excercise is pull up then pull up can be more than 3 sets

// expected output :
// 1. store into the database the workout, the exercise, the number of sets, the weight used for weight exercise and the level for bodyweight exercise, the date the workout should be performed (use momentjs), for example today is monday february 3rd, if the workout is on wednesday and saturday then calculate the nearest future wendnesday and saturday which is 4th and 7th february respectively.
// 2. make a dummy function to calculate the number of weight or the level of exercise the user should do, for now just make the default 10 kg and level 1, but in the future it'll contain the logic to determine
//  * what method will be best to achieve this? (can use anything and everything), give the best possible method and the complete code of the workout generation
